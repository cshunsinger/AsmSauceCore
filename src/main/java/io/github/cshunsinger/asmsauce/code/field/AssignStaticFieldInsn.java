package io.github.cshunsinger.asmsauce.code.field;

import io.github.cshunsinger.asmsauce.code.CodeInsnBuilderLike;
import io.github.cshunsinger.asmsauce.definitions.FieldDefinition;
import io.github.cshunsinger.asmsauce.definitions.TypeDefinition;

import java.util.Stack;

import static org.objectweb.asm.Opcodes.PUTSTATIC;

/**
 * Code builder for assigning a value to a static field.
 */
public class AssignStaticFieldInsn extends AssignInstanceFieldInsn {
    /**
     * Creates a new code builder whose bytecode will assign a value to a static field.
     * @param fieldDefinition The static field to assign to.
     * @param valueBuilder Code builder whose generated bytecode will stack the value to be assigned to the static field.
     * @throws IllegalArgumentException If fieldDefinition defines a non-static field.
     */
    public AssignStaticFieldInsn(FieldDefinition fieldDefinition, CodeInsnBuilderLike valueBuilder) {
        super(fieldDefinition, valueBuilder);

        if(!fieldDefinition.getAccessModifiers().isStatic()) {
            throw new IllegalArgumentException(
                "This instruction only handles assigning static fields. Field '%s.%s' is not static.".formatted(
                    fieldDefinition.getFieldType().getType().getName(),
                    fieldDefinition.getFieldName().getName()
                )
            );
        }
    }

    @Override
    public void build() {
        fieldDefinition = fieldDefinition.completeDefinition();

        //Execute the value builder to place item onto stack that will be assigned to field
        executeValueBuilder();

        //Generate the bytecode to set the static field value
        generateBytecode();
    }

    @Override
    protected void performTypeStackChanges(Stack<TypeDefinition> typeStack) {
        //Pop the value assigned to the static field from the stack
        typeStack.pop();
    }

    @Override
    protected int instruction() {
        return PUTSTATIC;
    }

    @Override
    protected TypeDefinition determineFieldOwner(Stack<TypeDefinition> ignored) {
        return fieldDefinition.getFieldOwner();
    }
}