package io.github.cshunsinger.asmsauce.code.array;

import io.github.cshunsinger.asmsauce.code.CodeInsnBuilderLike;
import io.github.cshunsinger.asmsauce.code.cast.ImplicitConversionInsn;
import io.github.cshunsinger.asmsauce.definitions.TypeDefinition;

import java.util.Map;

import static io.github.cshunsinger.asmsauce.MethodBuildingContext.context;
import static io.github.cshunsinger.asmsauce.definitions.TypeDefinition.*;
import static io.github.cshunsinger.asmsauce.definitions.TypeDefinition.DOUBLE;
import static io.github.cshunsinger.asmsauce.definitions.TypeDefinition.FLOAT;
import static io.github.cshunsinger.asmsauce.definitions.TypeDefinition.LONG;
import static org.objectweb.asm.Opcodes.*;

/**
 * This class represents an instruction to place a value into an array at an index. The bytecode generated by this
 * class will verify an array is on the stack, build the bytecode to stack an int (and validate the stack), and then
 * stack a value to be stored. Afterwards, the generated bytecode will store the value into the array at the index.
 */
public class ArrayStoreInsn extends ArrayAccessInsn {
    private static final Map<TypeDefinition, Integer> TYPE_OPCODES = Map.of(
        BOOLEAN, BASTORE,
        BYTE, BASTORE,
        CHAR, CASTORE,
        SHORT, SASTORE,
        INT, IASTORE,
        LONG, LASTORE,
        FLOAT, FASTORE,
        DOUBLE, DASTORE
    );

    private final CodeInsnBuilderLike valueBuilder;

    /**
     * Creates a new code builder which will store a value in an array at an index.
     * @param arrayIndexCode A code builder which will place an int onto the stack as the array index from which to retrieve the array value.
     * @param valueBuilder A code builder which will stack a value to store in the array at an index.
     * @throws IllegalArgumentException If the code builder for stacking the array index is null.
     * @throws IllegalArgumentException If the code builder for stacking the value to store in the array is null.
     */
    public ArrayStoreInsn(CodeInsnBuilderLike arrayIndexCode, CodeInsnBuilderLike valueBuilder) {
        super(arrayIndexCode);

        if(valueBuilder == null)
            throw new IllegalArgumentException("Array value builder cannot be null.");

        this.valueBuilder = valueBuilder.getFirstInStack();
    }

    @Override
    public void buildArrayInsn(TypeDefinition arrayType) {
        //Stack the value to be stored in the array
        int originalStackSize = context().stackSize();
        valueBuilder.build();
        int numStacked = context().stackSize() - originalStackSize;

        //Ensure exactly 1 element was stacked
        if(numStacked != 1)
            throw new IllegalStateException("Expected 1 element to be stacked. Got %d instead.".formatted(numStacked));

        //Ensure the element that was stacked matches the array component type
        TypeDefinition componentType = arrayType.getComponentType();
        new ImplicitConversionInsn(componentType).build();

        //Now the bytecode for the actual operation
        context().getMethodVisitor().visitInsn(TYPE_OPCODES.getOrDefault(componentType, AASTORE));
        //And the represented stack updates (pop the stored value, array index, and array ref from the stack)
        context().popStack(3);
    }
}