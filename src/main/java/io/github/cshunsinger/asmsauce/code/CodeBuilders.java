package io.github.cshunsinger.asmsauce.code;

import io.github.cshunsinger.asmsauce.ThisClass;
import io.github.cshunsinger.asmsauce.code.branch.IfBranch;
import io.github.cshunsinger.asmsauce.code.branch.condition.Condition;
import io.github.cshunsinger.asmsauce.code.cast.ExplicitConversionInsn;
import io.github.cshunsinger.asmsauce.code.field.GetStaticFieldInsn;
import io.github.cshunsinger.asmsauce.code.method.InstantiateObjectInsn;
import io.github.cshunsinger.asmsauce.code.method.InvokeBaseConstructorInsn;
import io.github.cshunsinger.asmsauce.code.method.InvokeStaticMethodInsn;
import io.github.cshunsinger.asmsauce.code.method.ReturnInsn;
import io.github.cshunsinger.asmsauce.code.stack.StackLocalVariableInsn;
import io.github.cshunsinger.asmsauce.code.stack.StackObjectLiteralInsn;
import io.github.cshunsinger.asmsauce.code.stack.StackPrimitiveLiteralInsn;
import io.github.cshunsinger.asmsauce.code.stack.StoreLocalVariableInsn;
import io.github.cshunsinger.asmsauce.DefinitionBuilders;
import io.github.cshunsinger.asmsauce.code.field.AssignStaticFieldInsn;
import io.github.cshunsinger.asmsauce.definitions.*;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import java.lang.reflect.Constructor;

import static io.github.cshunsinger.asmsauce.modifiers.AccessModifiers.privateStatic;
import static io.github.cshunsinger.asmsauce.modifiers.AccessModifiers.publicStatic;

/**
 * This class contains all of the static methods which can be used to create all of the code building instructions.
 * Like with DefinitionBuilders {@link DefinitionBuilders} it is recommended to use a static import to access the
 * methods in this class.
 *
 * @see {@link DefinitionBuilders}
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class CodeBuilders {
    /**
     * Shortcut method to stack the local variable at index-0 onto the jvm stack. When building an instance method,
     * the stacked value will be a reference to 'this'.
     * @return A code builder which stacks a reference to 'this' when building an instance method.
     * @see #getVar(int) {@link #getVar(int)} To stack a local variable at a given index.
     * @see #getVar(String) {@link #getVar(String)} To stack a named local variable or parameter by name.
     */
    public static StackLocalVariableInsn this_() {
        return getVar(0);
    }

    /**
     * Stack a local variable or parameter at a given index.
     * @param localIndex The index of the local variable to stack.
     * @return A code builder which will stack a local variable at the given localIndex onto the jvm stack.
     * @see #this_() {@link #this_()}
     * @see #getVar(String) {@link #getVar(String)} To stack a named local variable or parameter by name.
     */
    public static StackLocalVariableInsn getVar(int localIndex) {
        return new StackLocalVariableInsn(localIndex);
    }

    /**
     * Stack a named local variable or parameter. This method will not work for stacking unnamed local variables or parameters.
     * @param localName The name of the local variable or parameter to stack.
     * @return A code builder which will stack a named local variable or parameter with the given name onto the jvm stack.
     * @see #this_() {@link #this_()}
     * @see #getVar(int) {@link #getVar(int)} To stack a local variable at a given index.
     */
    public static StackLocalVariableInsn getVar(String localName) {
        return new StackLocalVariableInsn(localName);
    }

    /**
     * Set a local variable at a given index.
     * @param localIndex The index of the local variable to store the value to.
     * @param valueBuilder The code builder which stacks a value to be stored to the local variable.
     * @return A code builder whose generated bytecode will store a value to a local variable.
     * @see #setVar(CodeInsnBuilderLike) {@link #setVar(CodeInsnBuilderLike)}
     * @see #setVar(String, CodeInsnBuilderLike) {@link #setVar(String, CodeInsnBuilderLike)}
     */
    public static StoreLocalVariableInsn setVar(Integer localIndex, CodeInsnBuilderLike valueBuilder) {
        return new StoreLocalVariableInsn(localIndex, valueBuilder);
    }

    /**
     * Creates a new local variable with a new index, and sets it to a value.
     * @param valueBuilder The code builder which stacks a value to be stored to the new local variable.
     * @return A code builder whose generated bytecode will store a value to a new local variable.
     * @see #setVar(Integer, CodeInsnBuilderLike) {@link #setVar(Integer, CodeInsnBuilderLike)}
     * @see #setVar(String, CodeInsnBuilderLike) {@link #setVar(String, CodeInsnBuilderLike)}
     */
    public static StoreLocalVariableInsn setVar(CodeInsnBuilderLike valueBuilder) {
        return setVar((Integer)null, valueBuilder);
    }

    /**
     * Sets a value to a named local variable. If no named local variable exists then a new one will be created.
     * @param localName The name of the local variable to set.
     * @param valueBuilder The code builder which stacks a value to be stored to the named local variable.
     * @return A code builder whose generated bytecode will store a value to the named local variable, creating a new one if necessary.
     * @see #setVar(Integer, CodeInsnBuilderLike) {@link #setVar(Integer, CodeInsnBuilderLike)}
     * @see #setVar(CodeInsnBuilderLike) {@link #setVar(CodeInsnBuilderLike)}
     */
    public static StoreLocalVariableInsn setVar(String localName, CodeInsnBuilderLike valueBuilder) {
        return new StoreLocalVariableInsn(localName, valueBuilder);
    }

    public static InvokeBaseConstructorInsn superConstructor(Constructor<?> constructor, CodeInsnBuilderLike... paramStackBuilders) {
        return new InvokeBaseConstructorInsn(constructor, paramStackBuilders);
    }

    public static InvokeBaseConstructorInsn superConstructor(TypeDefinition<?> owner, ParametersDefinition parameters, CodeInsnBuilderLike... paramStackBuilders) {
        return new InvokeBaseConstructorInsn(owner, parameters, DefinitionBuilders.noThrows(), paramStackBuilders);
    }

    public static InvokeBaseConstructorInsn superConstructor(Class<?> ownerClass, ParametersDefinition parameters, CodeInsnBuilderLike... paramStackBuilders) {
        return superConstructor(DefinitionBuilders.type(ownerClass), parameters, paramStackBuilders);
    }

    public static InvokeBaseConstructorInsn thisConstructor(ParametersDefinition parameters, CodeInsnBuilderLike... paramStackBuilders) {
        return superConstructor(ThisClass.class, parameters, paramStackBuilders);
    }

    /**
     * Stack null.
     * @return A code builder whose bytecode places a null reference onto the jvm stack.
     */
    public static StackObjectLiteralInsn stackNull() {
        return literalObj(null);
    }

    /**
     * Stack a String or Class-literal.
     * @param obj The String or Class to stack.
     * @return A code builder whose bytecode places a literal String or Class onto the jvm stack.
     */
    public static StackObjectLiteralInsn literalObj(Object obj) {
        return new StackObjectLiteralInsn(obj);
    }

    /**
     * Stack a literal byte.
     * @param b The byte to stack.
     * @return A code builder whose bytecode places a literal byte onto the jvm stack.
     */
    public static StackPrimitiveLiteralInsn literal(byte b) {
        return new StackPrimitiveLiteralInsn(b);
    }

    /**
     * Stack a literal short.
     * @param s The short to stack.
     * @return A code builder whose bytecode places a literal short onto the jvm stack.
     */
    public static StackPrimitiveLiteralInsn literal(short s) {
        return new StackPrimitiveLiteralInsn(s);
    }

    /**
     * Stack a literal char.
     * @param c The char to stack.
     * @return A code builder whose bytecode places a literal char onto the jvm stack.
     */
    public static StackPrimitiveLiteralInsn literal(char c) {
        return new StackPrimitiveLiteralInsn(c);
    }

    /**
     * Stack a literal int.
     * @param i The int to stack.
     * @return A code builder whose bytecode places a literal int onto the jvm stack.
     */
    public static StackPrimitiveLiteralInsn literal(int i) {
        return new StackPrimitiveLiteralInsn(i);
    }

    /**
     * Stack a literal long.
     * @param l The long to stack.
     * @return A code builder whose bytecode places a literal long onto the jvm stack.
     */
    public static StackPrimitiveLiteralInsn literal(long l) {
        return new StackPrimitiveLiteralInsn(l);
    }

    /**
     * Stack a literal float.
     * @param f The float to stack.
     * @return A code builder whose bytecode places a literal float onto the jvm stack.
     */
    public static StackPrimitiveLiteralInsn literal(float f) {
        return new StackPrimitiveLiteralInsn(f);
    }

    /**
     * Stack a literal double.
     * @param d The double to stack.
     * @return A code builder whose bytecode places a literal double onto the jvm stack.
     */
    public static StackPrimitiveLiteralInsn literal(double d) {
        return new StackPrimitiveLiteralInsn(d);
    }

    /**
     * Stack a literal boolean.
     * @param b The boolean to stack.
     * @return A code builder whose bytecode places a literal boolean onto the jvm stack.
     */
    public static StackPrimitiveLiteralInsn literal(boolean b) {
        return new StackPrimitiveLiteralInsn(b);
    }

    /**
     * Stack boolean-true.
     * @return A code builder whose bytecode places boolean-true onto the stack.
     */
    public static StackPrimitiveLiteralInsn true_() {
        return literal(true);
    }

    /**
     * Stack boolean-false.
     * @return A code builder whose bytecode places boolean-false onto the stack.
     */
    public static StackPrimitiveLiteralInsn false_() {
        return literal(false);
    }

    /**
     * Return from a void method.
     * @return A code builder which produces the bytecode to return from a void method.
     */
    public static ReturnInsn returnVoid() {
        return returnValue(null);
    }

    /**
     * Return a value from a non-void method.
     * @param codeInsnBuilder The code builder which stacks the value to return.
     * @return A code builder which produces the bytecode to return a value from a non-void method.
     */
    public static ReturnInsn returnValue(CodeInsnBuilderLike codeInsnBuilder) {
        return new ReturnInsn(codeInsnBuilder);
    }

    /**
     * Invoke a static method.
     * @param ownerType Owner of the method.
     * @param name Name of the method.
     * @param paramBuilders Code builders to stack values to pass as parameters.
     * @return A code builder which produces the bytecode to invoke a static method.
     */
    public static InvokeStaticMethodInsn invokeStatic(TypeDefinition<?> ownerType, NameDefinition name, CodeInsnBuilderLike... paramBuilders) {
        return new InvokeStaticMethodInsn(ownerType, name, paramBuilders);
    }

    /**
     * Invoke a static method.
     * @param ownerClass Owner of the method.
     * @param name Name of the method.
     * @param paramBuilders Code builders to stack values to pass as parameters.
     * @return A code builder which produces the bytecode to invoke a static method.
     */
    public static InvokeStaticMethodInsn invokeStatic(Class<?> ownerClass, String name, CodeInsnBuilderLike... paramBuilders) {
        return invokeStatic(DefinitionBuilders.type(ownerClass), DefinitionBuilders.name(name), paramBuilders);
    }

    /**
     * Invoke a static method. Explicit details.
     * @param type Owner of the method.
     * @param name Name of the method.
     * @param parameters Parameters of the method to call.
     * @param returnType Return type of the method being called.
     * @param paramBuilders Code builders to stack values to pass as parameters.
     * @return A code builder which produces the bytecode to invoke a static method.
     */
    public static InvokeStaticMethodInsn invokeStatic(TypeDefinition<?> type, NameDefinition name, ParametersDefinition parameters, TypeDefinition<?> returnType, CodeInsnBuilderLike... paramBuilders) {
        return new InvokeStaticMethodInsn(type, name, parameters, returnType, DefinitionBuilders.noThrows(), paramBuilders);
    }

    /**
     * Invoke a static method. Explicit details.
     * @param typeClass Owner of the method.
     * @param name Name of the method.
     * @param parameters Parameters of the method to call.
     * @param returnType Return type of the method being called.
     * @param parameterBuilders Code builders to stack values to pass as parameters.
     * @return A code builder which produces the bytecode to invoke a static method.
     */
    public static InvokeStaticMethodInsn invokeStatic(Class<?> typeClass, NameDefinition name, ParametersDefinition parameters, TypeDefinition<?> returnType, CodeInsnBuilderLike... parameterBuilders) {
        return invokeStatic(DefinitionBuilders.type(typeClass), name, parameters, returnType, parameterBuilders);
    }

    /**
     * Invoke a static method. Explicit details.
     * @param type Owner of the method.
     * @param name Name of the method.
     * @param parameters Parameters of the method to call.
     * @param parameterBuilders Code builders to stack values to pass as parameters.
     * @return A code builder which produces the bytecode to invoke a static method.
     */
    public static InvokeStaticMethodInsn invokeStatic(TypeDefinition<?> type, NameDefinition name, ParametersDefinition parameters, CodeInsnBuilderLike... parameterBuilders) {
        return new InvokeStaticMethodInsn(type, name, parameters, DefinitionBuilders.voidType(), DefinitionBuilders.noThrows(), parameterBuilders);
    }

    /**
     * Invoke a static method. Explicit details.
     * @param typeClass Owner of the method.
     * @param name Name of the method.
     * @param parameters Parameters of the method to call.
     * @param parameterBuilders Code builders to stack values to pass as parameters.
     * @return A code builder which produces the bytecode to invoke a static method.
     */
    public static InvokeStaticMethodInsn invokeStatic(Class<?> typeClass, NameDefinition name, ParametersDefinition parameters, CodeInsnBuilderLike... parameterBuilders) {
        return invokeStatic(DefinitionBuilders.type(typeClass), name, parameters, parameterBuilders);
    }

    public static GetStaticFieldInsn getStatic(TypeDefinition<?> owner, NameDefinition name, TypeDefinition<?> fieldType) {
        return new GetStaticFieldInsn(new CompleteFieldDefinition(
            publicStatic(), //Access is irrelevant here, other than that this be static
            owner, name, fieldType
        ));
    }

    public static GetStaticFieldInsn getStatic(TypeDefinition<?> owner, NameDefinition name) {
        return new GetStaticFieldInsn(new FieldDefinition(privateStatic(), owner, name, null));
    }

    public static GetStaticFieldInsn getStatic(Class<?> ownerClass, String fieldName) {
        return getStatic(DefinitionBuilders.type(ownerClass), DefinitionBuilders.name(fieldName));
    }

    public static AssignStaticFieldInsn setStatic(TypeDefinition<?> owner, NameDefinition name, TypeDefinition<?> fieldType, CodeInsnBuilderLike valueBuilder) {
        return new AssignStaticFieldInsn(new CompleteFieldDefinition(
            publicStatic(),
            owner, name, fieldType
        ), valueBuilder);
    }

    public static AssignStaticFieldInsn setStatic(TypeDefinition<?> owner, NameDefinition name, CodeInsnBuilderLike valueBuilder) {
        return new AssignStaticFieldInsn(new FieldDefinition(
            publicStatic(),
            owner, name, null
        ), valueBuilder);
    }

    public static AssignStaticFieldInsn setStatic(Class<?> owner, String name, CodeInsnBuilderLike valueBuilder) {
        return setStatic(DefinitionBuilders.type(owner), DefinitionBuilders.name(name), valueBuilder);
    }

    public static ExplicitConversionInsn cast(TypeDefinition<?> toType, CodeInsnBuilderLike valueBuilder) {
        return new ExplicitConversionInsn(toType, valueBuilder);
    }

    public static ExplicitConversionInsn cast(Class<?> toType, CodeInsnBuilderLike valueBuilder) {
        return cast(DefinitionBuilders.type(toType), valueBuilder);
    }

    public static InstantiateObjectInsn instantiate(TypeDefinition<?> type, ParametersDefinition parameters, CodeInsnBuilderLike... paramBuilders) {
        return new InstantiateObjectInsn(type, parameters, paramBuilders);
    }

    public static InstantiateObjectInsn instantiate(Class<?> type, ParametersDefinition parameters, CodeInsnBuilderLike... paramBuilders) {
        return instantiate(DefinitionBuilders.type(type), parameters, paramBuilders);
    }

    public static InstantiateObjectInsn instantiate(TypeDefinition<?> type, CodeInsnBuilderLike... paramBuilders) {
        return new InstantiateObjectInsn(type, paramBuilders);
    }

    public static InstantiateObjectInsn instantiate(Class<?> type, CodeInsnBuilderLike... paramBuilders) {
        return instantiate(DefinitionBuilders.type(type), paramBuilders);
    }

    public static CodeBlock block(CodeInsnBuilderLike... builders) {
        return new CodeBlock(builders);
    }

    public static IfBranch.IfBuilder if_(Condition condition) {
        return new IfBranch.IfBuilder(condition);
    }

    public static Condition not(Condition condition) {
        return condition.invert();
    }
}